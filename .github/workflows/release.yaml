name: tag-release
on:
  push:
    branches:
      - main
jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    name: release changed
    steps:
      - uses: actions/checkout@v3
        name: checkout
        with:
          # non-shallow, because we want tag information
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: ./.github/actions/tag-versions/compute-modules
        name: get modules
        id: folders
      - uses: ./.github/actions/tag-versions/was-module-modified
        name: check modified
        id: modified
        with:
          modules: ${{ steps.folders.outputs.modules }}
      - name: modified modules
        env: { MODULES_OUTPUT: "${{ toJson(steps.modified.outputs) }}" }
        run: "echo $MODULES_OUTPUT"
      - name: Run Test
        if: ${{ steps.modified.outputs.modified }}
        shell: bash
        run: |
          m=( ${{ steps.modified.outputs.modules }} )
          printf "%s\n" ${m[@]} | xargs -I{} go test ./{}/...
      - uses: ./.github/actions/tag-versions/get-current-versions
        if: ${{ steps.modified.outputs.modified }}
        name: get current versions
        id: versions
        with:
          modules: ${{ steps.modified.outputs.modules }}
      - uses: ./.github/actions/tag-versions/upgrade-module-versions
        if: ${{ steps.modified.outputs.modified }}
        name: upgrade versions
        id: upg-versions
        with:
          jsonTag: ${{ steps.versions.outputs.jsonTag }}
      - uses: ./.github/actions/tag-versions/tag-and-push-versions
        if: ${{ steps.modified.outputs.modified }}
        name: tag and push versions
        id: tag-n-push
        with:
          jsonTag: ${{ steps.upg-versions.outputs.jsonTag }}
