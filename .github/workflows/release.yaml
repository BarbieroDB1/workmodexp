name: tag-release
on:
  push:
    branches:
      - main
    paths:
      - client/*
      - proto/*
      - service/*
jobs:
  build:
    runs-on: ubuntu-latest
    name: check modules to release
    steps:
      - uses: actions/github-script@v6
        name: check if should release
        id: folders
        with:
          result-encoding: json
          script: |
            const RELEVANT_PATHS = new Map([
                ["client", false],
                ["proto", false],
                ["service", false],
            ]);
            const diff = await github.rest.repos.compareCommitsWithBasehead({
                owner: context.repo.owner,
                repo: context.repo.repo,
                basehead: `${context.payload.before}...${context.payload.after}`,
            });
            if (!diff.status || diff.status > 299) {
                return []
            }
            const filesChanged = diff.data.files.map((f) => f.filename);
            core.info("Files changed since last push: " + JSON.stringify(filesChanged));
            for (let [path, _] of RELEVANT_PATHS) {
                if (filesChanged.some((f) => f.startsWith(path + "/"))) {
                    RELEVANT_PATHS.set(path, true);
                    break;
                }
            }
            const result = [...RELEVANT_PATHS].filter(([_, v]) => v).map(([k, _]) => k);
            core.info("Modules to be released: " + JSON.stringify(result));
            return result;
      - uses: actions/checkout@v3
        name: checkout
        with:
          # non-shallow, because we want tag information
          fetch-depth: 0
      - run: npm install semver
      - uses: actions/github-script@v6
        name: get latest tags for new releases
        id: versions
        with:
          script: |
            const folders = ${{ steps.folders.outputs.result }}
            ;
            //
            const currentVersions = new Map();
            for (let module of folders) {
                const tagcmd = `git tag -l "${module}/*" --sort "-v:refname" | head -n 1`;
                let resultTag = await exec.exec(tagcmd);
                if (!resultTag) {
                    resultTag = `${module}/v0.0.1`;
                }
                core.info("found tag " + resultTag)
                currentVersions.set(module, resultTag);
            }
            const semver = require('semver');
            const newVersions = new Map();
            for (let [module, tag] of currentVersions) {
                let cleanVersion = semver.valid(tag.split('/')[1])
                if (!cleanVersion) {
                    cleanVersion = "0.0.0"
                }
                let incVersion = semver.inc(cleanVersion, 'patch')
                newVersions.set(module, `${module}/v${incVersion}`)
            }
            const result = [...newVersions.values()]
            core.info("New tags will be " + result)
            return result